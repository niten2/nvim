https://vim.rtorr.com/
https://github.com/sjl/badwolf/


dG
gd
gD

^E ^Y
^F ^B

^Wn
^Ws

:w!!  - save as sudo
zr и zm открывают и закрывают складки по всему файлу.

:g/.\n\n\@!/norm o
:%s/;/
%s/Здоровье//gi
%s/[а-яА-Я ]/./g
%g!/message/d
%g!/^\D/d

# NOTE 4 to 2
%s;^\(\s\+\);\=repeat('  ', len(submatch(0))/2);g

bufdo %s/beforeAll/beforeAll/g
cfdo %s/beforeEach/beforeAll/g

:set path=/home/niten2/_link/chat-back-end/chat-back-end
:set suffixesadd+=.js
:set includeexpr=substitute(substitute(substitute(v:fname,'::','/','g'),'$','.rb',''),'\(\<\u\l\+\|\l\+\)\(\u\)','\l\1_\l\2','g')

# " ay
# vmap <C-c> "+yi
# vmap <C-x> "+c
# vmap <C-v> c<ESC>"+p
# imap <C-v> <ESC>"+pa

sudo apt-get install ctags

au Bufread,BufNewfile *tags setlocal filetype=tags | let &tags = expand("%:t")
set tags+=/home/niten2/_link/chat-back-end
set tags=/home/niten2/_link/chat-back-end/chat-back-end/tags
ctags -R --exclude=.git --exclude=node_modules --exclude=test
ctags -R --exclude=node_modules
ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .
--ignore-dir=./.DS_Store --ignore-dir=./node_modules --ignore-dir=./.git
set tags+=/home/niten2/_link/chat-back-end/chat-back-end/.DS_Store

# NOTE FIX python on ubuntu 18.04
sudo apt-get download python3.6=3.6.5-3 python3.6-minimal=3.6.5-3 libpython3.6-stdlib=3.6.5-3 libpython3.6-minimal=3.6.5-3
sudo dpkg -i --force-downgrade *3.6.5*
install the "neovim" Python package systemwide:
sudo pip2 install --upgrade neovim
pip2 install --user --upgrade neovim
sudo pip3 install --upgrade neovim
pip3 install --user --upgrade neovim


nvim install ~/.config/nvim/init.vim.
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath
source ~/.vimrc

# " // " not work
# " // set guifont=Monospace:h20
# " // set font=Monospace\ 20

# checkhealt
" // npm -g install jshint jsxhint jsonlint stylelint sass-lint raml-cop markdownlint-cli write-good

" vim config
git clone git://github.com/rafi/vim-config.git ~/vimconf

mkdir ~/.config
git clone git://github.com/rafi/vim-config.git ~/.config/nvim

ln -s ~/.config/nvim ~/.vim

// ignore case
set noic
set ic

// cs'"

Команда % поможет проскочить от открытой скобки до закрывающей ее скобки,
так же как сочетание # if переключит вас на # endif. С помощью % удобно проверять конструкции вроде () и {}.
Использование gd поможет перескочить от переменной к месту ее объявления.

:abbr hte the

Другой мощный механизм ищет все случаи совпадения имени в группе файлов через команду :grep.
Vim создает список всех совпадений и переходит к первому из них.
Затем, с помощью :cn можно проскочить к следующему.
Это может быть очень полезно, если нужно изменить количество аргументов в вызове функции.
Простой пример: в резюме, которое вы пишете, не должно быть больше 500 слов.
Теперь просто выбираете абзац и отправляете его в приложение wc: vip:w !wc -w.
Внешняя команда wc -w используется для подсчета слов. Довольно просто, правда?


sort u -> remove dublicates lines


:reg t

ctrl - v

daw

counters
C-a
C-x

gu, gU - registers

# insert mode
C-h, C-w, C-u

<C-v>098
ga
gv


* NOTE EX
:delete
:yank
:put
:copy - :t
:move - :m
:join
:normal
:substitute
:global

2co.
2m32
10put_

:6t
:t6
:t$
:'<,'>t0

:m$

:<>n<C-d>

* comments
# " set foldmethod=syntax
# " set foldnestmax=1
# " set foldcolumn=10

# " Uncomment the following to have Vim jump to the last position when
# " reopening a file
# " if has("autocmd")
# "   au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
# " endif

# " set foldenable foldmethod=indent foldlevel=99
# " set nofoldenable
# " hi SpellBad cterm=underline ctermbg=NONE ctermfg=NONE
# " NOTE cterm
# " bold
# " underline
# " reverse
# " italic
# " none

# " hi SpellBad cterm=underline

# "set foldenable " отклключить фолдинг по умолчанию
# "set foldmethod=syntax " определять блоки на основе синтаксиса файла
# "set foldmethod=indent " определять блоки на основе отступов
# "set foldnestmax=3       "deepest fold is 3 levels
# "set foldcolumn=10 " показать полосу для управления сворачиванием
# "set foldlevel=1 " Первый уровень вложенности открыт, остальные закрыты
# "set foldopen=all " автоматическое открытие сверток при заходе в них

# " setlocal foldmethod=syntax
# " syntax region htmlFold start="<\z(p\|h\d\|i\?frame\|table\|colgroup\|thead\|tfoot\|tbody\|t[dhr]\|pre\|[diou]l\|li\|span\|div\|head\|script\|style\|blockquote\|form\)\%(\_s*\_[^/]\?>\|\_s\_[^>]*\_[^>/]>\)" end="</\z1\_s*>" fold transparent keepend extend containedin=htmlHead,htmlH\d
# "

# " autocmd BufWinLeave *.* mkview
# " autocmd BufWinEnter *.* silent loadview

# " augroup remember_folds
# "   autocmd!
# "   autocmd BufWinLeave * mkview
# "   " autocmd BufWinEnter * silent! loadview
# "   autocmd BufWinEnter *.* silent! loadview
# " augroup END

# " autocmd BufWrite * silent! mkview
# " autocmd BufRead  * silent! loadview
# " let g:deoplete#enable_at_startup = 1

# :verbose imap <Tab>

# " chrisbra/NrrwRgn
# <>NR

# " jreybert/vimagit
# , - shift - m

# " let g:ale_linters_explicit = 1
# " nmap <silent> <C-k> <Plug>(ale_previous_wrap)
# " nmap <silent> <C-j> <Plug>(ale_next_wrap)
# "
# " echodoc
# " set cmdheight=2
# " let g:echodoc#enable_at_startup = 1
# " let g:echodoc#type = "signature"
# " let g:echodoc#type = 'floating'

# " inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
# " call deoplete#custom#var('tabnine', {
# " \ 'line_limit': 500,
# " \ 'max_num_results': 20,
# " \ })

# " YouCompleteMe
# " https://valloric.github.io/YouCompleteMe/#user-guide
# " cd ~/.vim/bundle/YouCompleteMe ./install.py
# " python3 install.py --clang-completer
# " let g:ycm_key_list_select_completion=[]
# " let g:ycm_key_list_previous_completion=[]
# " let g:ycm_min_num_of_chars_for_completion = 1
# " let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
# " let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

# " let g:jsdoc_allow_input_prompt = 0

# " vim-syntastic/syntastic
# " let g:syntastic_check_on_open = 1
# " let g:syntastic_check_on_wq = 0
# " let g:syntastic_javascript_checkers = ['eslint']
# " let g:syntastic_javascript_eslint_exe = 'npm run lint --'
# " let g:syntastic_error_symbol='✗'
# " let g:syntastic_warning_symbol='⚠'
# " let g:syntastic_style_error_symbol  = '⚡'
# " let g:syntastic_style_warning_symbol  = '⚡'
# " let g:syntastic_python_pylint_exe = "pylint2"
# " let g:syntastic_mode_map = { 'mode': 'active',
# "     \ 'active_filetypes': [],
# "     \ 'passive_filetypes': ['python'] }
# " let g:syntastic_cpp_compiler_options = ' -std=c++11'
# " let g:syntastic_tex_checkers = ['lacheck']
# " let g:syntastic_always_populate_loc_list = 1
# " let g:syntastic_python_checkers = ['flake8']
# " let g:syntastic_python_flake8_args = '--select=F,C9 --max-complexity=10'
# " let g:syntastic_c_compiler_options = "-std=gnu11
# "   \  -Wall -Wextra -Wshadow -Wpointer-arith
# "   \  -Wcast-align -Wwrite-strings -Wmissing-prototypes
# "   \  -Wmissing-declarations -Wredundant-decls -Wnested-externs
# "   \  -Winline -Wno-long-long -Wuninitialized -Wconversion
# "   \  -Wstrict-prototypes -pedantic"
# " let g:syntastic_stl_format = '[=> ln:%F (%t)]'
# " let g:syntastic_aggregate_errors=1
# " let g:syntastic_enable_signs=1
# " let g:syntastic_auto_loc_list=2
# " let g:syntastic_c_no_include_search = 1
# " let g:syntastic_c_auto_refresh_includes = 1
# " let g:syntastic_c_check_header = 1
# " let g:jsx_ext_required = 0 " jsx in js
# "

# " let g:UltiSnipsExpandTrigger = "<tab>"
# " let g:UltiSnipsJumpForwardTrigger = "<tab>"
# " let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

# " http://stackoverflow.com/questions/356126/how-can-you-automatically-remove-trailing-whitespace-in-vim/1618401#1618401
# " fun! <SID>StripTrailingWhitespaces()
# "     let l = line(".")
# "     let c = col(".")
# "     %s/\s\+$//e
# "     call cursor(l, c)
# " endfun

# " use <Backspace>, instead <x>
# " set backspace=indent,eol,start whichwrap+=<,>,[,]

# " syn match SingleChar '\<\A*\a\A*\>' contains=@NoSpell

# " hi clear SpellBad
# " hi clear SpellRare
# " hi clear SpellCap
# " hi clear SpellLocal
# " hi SpellBad cterm=underline
# " hi SpellRare cterm=underline
# " hi SpellCap cterm=underline
# " hi SpellLocal cterm=underline

# " nnoremap ,a :Ack! --ignore-file=is:tags --ignore-file=is:package-lock.json --ignore-file=is:yarn.lock --ignore-file=is:fakeTest.js --ignore-file=is:report.xml
# " map <F8> :source ~/.vim_session <cr>
# " map <A-2> :NERDTree ~/_link/TaiXingWang/api-ipreplay<CR>
# " map <A-2> :NERDTree ~/_link/form.io/cqd_input_forms_frontend<CR>
# " map <A-2> :NERDTree ~/_link/smm_crm_system/smm_system<CR>
# " map at :ALEToggle<CR>
# " nnoremap <leader>s :call <SID>StripTrailingWhitespaces()<cr>
# " map ,f StripTrailingWhitespaces()<cr>
# " map <A-2> :NERDTree ~/_link/todo_credit_site_backend<CR>
# " map <A-2> :NERDTree ~/_link/todo_news_portal/app<CR>
# " map <A-3> :NERDTree ~/_link/credit_site/<CR>
# " map <A-2> :NERDTree ~/_link/ico-dashboard/<CR>
# " map <A-3> :NERDTree ~/_link/ico-processing/<CR>

# " NOTE fast move text
# " nmap <C-H> 5h
# " nmap <C-J> 5j
# " nmap <C-K> 5k
# " nmap <C-L> 5l
